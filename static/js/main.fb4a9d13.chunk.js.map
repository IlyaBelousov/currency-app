{"version":3,"sources":["dal/exchange-api.ts","bll/app-reducer.ts","bll/conversion-reducer.ts","ui/ExchangeCard.tsx","dal/latest-rates-api.ts","bll/rates-reducer.ts","ui/SuperSelect.tsx","ui/LatestRates.tsx","ui/ErrorSnackBar.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","ui/ExchangeCard.module.css","App.module.css"],"names":["instance","axios","create","method","baseURL","headers","exchangeAPI","from","to","q","get","params","initialState","error","isLoading","setError","type","setIsLoading","convertValues","result","ExchangeCard","useSelector","state","conversion","currency","dispatch","useDispatch","exchangePattern","amount","mid","useState","value","setValue","className","s","currWrapper","currCard","TextField","onKeyPress","e","key","test","amountw","slice","search","fromCurrency","toCurr","length","then","response","data","setResult","Math","ceil","payload","catch","message","convertCurrency","trim","fullWidth","label","onChange","currentTarget","toUpperCase","variant","placeholder","helperText","resultContainer","latestRates","currencyCode","baseCode","navigator","language","rates","fetchLatestRates","setRates","baseCurrency","SuperSelect","FormControl","sx","m","minWidth","InputLabel","Select","event","target","MenuItem","LatestRates","useEffect","columns","id","Paper","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","fontSize","TableBody","Object","keys","row","hover","role","tabIndex","Alert","React","forwardRef","props","ref","elevation","ErrorSnackBar","app","handleClose","reason","Stack","spacing","Snackbar","open","autoHideDuration","onClose","severity","App","appWrapper","AppBar","position","Toolbar","justifyContent","alignItems","Typography","Button","color","Box","LinearProgress","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.fb4a9d13.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    method: 'GET',\r\n    baseURL: 'https://currency-exchange.p.rapidapi.com/exchange',\r\n    headers: {\r\n        'x-rapidapi-host': 'currency-exchange.p.rapidapi.com',\r\n        'x-rapidapi-key': 'e817d06739mshe406e098177e879p147060jsn4742de4ee977'\r\n    }\r\n})\r\n\r\nexport const exchangeAPI = {\r\n    getCurrencies(from: string, to: string, q: string) {\r\n        return instance.get<number>(``, {params: {from, to, q}})\r\n    }\r\n}","const initialState = {\r\n    error: '',\r\n    isLoading: false\r\n}\r\ntype initialStateType = typeof initialState\r\nexport const appReducer = (state: initialStateType = initialState, action: AppActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-IS-LOADING\": {\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setError = (error: string) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport const setIsLoading = (isLoading: boolean) => {\r\n    return {\r\n        type: 'APP/SET-IS-LOADING',\r\n        isLoading\r\n    } as const\r\n}\r\nexport type AppActionsType = ReturnType<typeof setIsLoading>|ReturnType<typeof setError>","import {exchangeAPI} from \"../dal/exchange-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\nimport {AppActionsType, setError, setIsLoading} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    convertValues: {\r\n        from: '',\r\n        to: '',\r\n    },\r\n    result: 0\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const conversionReducer = (state: InitialStateType = initialState, action: ConvertActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CONVERSION/CONVERT-CURRENCY': {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                convertValues: {...action.payload},\r\n            }\r\n        }\r\n        case \"CONVERSION/SET-RESULT\":{\r\n            debugger\r\n            return {\r\n                ...state,\r\n                result: action.result\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nconst setCurrency = (payload: { from: string, to: string, amount: string }) => {\r\n    return {\r\n        type: 'CONVERSION/CONVERT-CURRENCY',\r\n        payload,\r\n    } as const\r\n}\r\nconst setResult = ( result: number) => {\r\n    return {\r\n        type: 'CONVERSION/SET-RESULT',\r\n        result\r\n    } as const\r\n}\r\n\r\nexport type ConvertActionsType =\r\n    ReturnType<typeof setCurrency>\r\n    | ReturnType<typeof setResult>\r\n    | AppActionsType\r\n\r\n//thunk\r\nexport const convertCurrency = (from: string, to: string, amount: string) => (dispatch: Dispatch) => {\r\n    dispatch(setIsLoading(true))\r\n    exchangeAPI.getCurrencies(from, to, amount)\r\n        .then(response => {\r\n            dispatch(setIsLoading(false))\r\n            let result = response.data;\r\n            dispatch(setResult(Math.ceil(+amount*result)))\r\n            dispatch(setCurrency({from, to, amount}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            dispatch(setIsLoading(false))\r\n            dispatch(setError(error.message))\r\n        })\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./ExchangeCard.module.css\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {convertCurrency} from \"../bll/conversion-reducer\";\r\n\r\nexport const ExchangeCard = () => {\r\n    const result = useSelector<AppRootStateType,number>(state=>state.conversion.result)\r\n    const currency = useSelector<AppRootStateType,string>(state=>state.conversion.convertValues.to)\r\n    const dispatch = useDispatch()\r\n    const exchangePattern = /^[0-9]{1,9}\\s[A-Z]{3}\\s[A-Z]{2}\\s[A-Z]{3}$/i\r\n    let amount = /^[0-9]{1,9}/\r\n    let from =/[A-Z]{3}/\r\n    let mid = /\\s[A-Z]{2}\\s/\r\n    let to  = /[A-Z]{3}$/\r\n    const [value, setValue] = useState('')\r\n    const [error, setError] = useState('')\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        if (exchangePattern.test(e.currentTarget.value)) {\r\n            setValue(e.currentTarget.value.toUpperCase())\r\n            setError('')\r\n        }\r\n        else {\r\n            setValue(e.currentTarget.value.toUpperCase())\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === 'Enter'){\r\n            if (exchangePattern.test(value)) {\r\n                let amountw = value.slice(value.search(amount),(value.search(from)-value.search(amount)))\r\n                let fromCurrency = value.slice(value.search(from),value.search(mid))\r\n                let toCurr = value.slice(value.search(to),value.length)\r\n                dispatch(convertCurrency(fromCurrency,toCurr,amountw.trim()))\r\n                setError('success')\r\n            }\r\n            else {\r\n                setError('error')\r\n            }\r\n        }\r\n    }\r\n    return <div className={s.currWrapper}>\r\n        <div className={s.currCard}>\r\n            <TextField\r\n                onKeyPress={onKeyPressHandler}\r\n                fullWidth\r\n                error={error==='error'}\r\n                label={'Enter values'}\r\n                onChange={onChangeHandler}\r\n                variant={'standard'}\r\n                placeholder={'Example: 15 usd in rub'}\r\n                helperText={error==='error'?'Incorrect value':''}\r\n                value={value}\r\n            />\r\n            <div className={s.resultContainer}>\r\n                <span>{result&&result }</span><span>{currency}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport type RateType = {\r\n    [key: string]: number;\r\n};\r\nexport type RatesResponseType = {\r\n    base_code: RateType\r\n    rates: RateType\r\n    result: string\r\n}\r\n\r\nexport const instance = axios.create({\r\n    method: 'GET',\r\n    baseURL: 'https://exchangerate-api.p.rapidapi.com/rapid/latest/',\r\n    headers: {\r\n        'x-rapidapi-host': 'exchangerate-api.p.rapidapi.com',\r\n        'x-rapidapi-key': 'e817d06739mshe406e098177e879p147060jsn4742de4ee977'\r\n    }\r\n})\r\nexport const latestRates = {\r\n    getRates(currencyCode: string) {\r\n        return instance.get<RatesResponseType>(`${currencyCode}`)\r\n    }\r\n}","import {latestRates, RateType} from \"../dal/latest-rates-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\nimport {AppActionsType, setError, setIsLoading} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    baseCode: navigator.language === 'ru-RU' ? 'RUB' : 'USD',\r\n    rates: {} as RateType\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nexport const ratesReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"RATES/CHANGE-BASE-CURRENCY\": {\r\n            return {\r\n                ...state,\r\n                baseCode: action.baseCurrency\r\n            }\r\n        }\r\n        case \"RATES/SET-RATES\": {\r\n            return {\r\n                ...state,\r\n                rates: {...action.rates}\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const changeBaseCurrency = (baseCurrency: string) => {\r\n    return {\r\n        type: 'RATES/CHANGE-BASE-CURRENCY',\r\n        baseCurrency\r\n    } as const\r\n}\r\nexport const setRates = (rates: RateType) => {\r\n    return {\r\n        type: 'RATES/SET-RATES',\r\n        rates\r\n    } as const\r\n}\r\n\r\n\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof changeBaseCurrency>\r\n    | ReturnType<typeof setRates>\r\n    | AppActionsType\r\n//thunk\r\nexport const fetchLatestRates = (currencyCode: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsLoading(true))\r\n    latestRates.getRates(currencyCode)\r\n        .then(response => {\r\n            dispatch(setIsLoading(false))\r\n            let rates = response.data.rates\r\n            delete rates[currencyCode]\r\n            dispatch(setRates(rates))\r\n            dispatch(changeBaseCurrency(currencyCode))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            dispatch(setIsLoading(false))\r\n            dispatch(setError(error.message))\r\n        })\r\n}","import React, {useState} from 'react';\r\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {fetchLatestRates} from \"../bll/rates-reducer\";\r\n\r\n\r\nexport const SuperSelect = () => {\r\n    const baseCurrency = useSelector<AppRootStateType, string>(state => state.rates.baseCode)\r\n    const dispatch = useDispatch()\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n        dispatch(fetchLatestRates(event.target.value))\r\n    };\r\n    return <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\r\n        <InputLabel>Base currency</InputLabel>\r\n        <Select\r\n            value={baseCurrency}\r\n            onChange={handleChange}\r\n            label={'Base currency'}\r\n        >\r\n            <MenuItem value={'USD'}>USD</MenuItem>\r\n            <MenuItem value={'EUR'}>EUR</MenuItem>\r\n            <MenuItem value={'RUB'}>RUB</MenuItem>\r\n        </Select>\r\n    </FormControl>\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport {RateType} from \"../dal/latest-rates-api\";\r\nimport {SuperSelect} from \"./SuperSelect\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {fetchLatestRates} from \"../bll/rates-reducer\";\r\n\r\n\r\ninterface Column {\r\n    id: 'name' | 'code';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nexport const LatestRates = () => {\r\n    const baseCurrency = useSelector<AppRootStateType, string>(state => state.rates.baseCode)\r\n    const rates = useSelector<AppRootStateType, RateType>(state => state.rates.rates)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchLatestRates(baseCurrency))\r\n    }, [])\r\n    const columns: readonly Column[] = [\r\n        {id: 'name', label: baseCurrency, minWidth: 70},\r\n        {id: 'code', label: 'Rate', minWidth: 20},\r\n\r\n    ];\r\n    return <>\r\n        <SuperSelect/>\r\n        <Paper sx={{width: '40%', overflow: 'hidden'}}>\r\n            <TableContainer sx={{maxHeight: 440}}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{minWidth: column.minWidth, fontSize: '16px'}}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {Object.keys(rates)\r\n                            .map((row) => {\r\n                                return (\r\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row}>\r\n                                        {\r\n                                            <TableCell key={columns[0].id} align={columns[0].align}>\r\n                                                {'1 '}{baseCurrency}\r\n                                            </TableCell>\r\n                                        }\r\n                                        {<TableCell key={columns[1].id} >\r\n                                            {rates[row]} {row}\r\n                                        </TableCell>\r\n                                        }\r\n                                    </TableRow>\r\n                                );\r\n                            })\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    </>\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../bll/store\";\r\nimport {setError} from \"../bll/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string>(state=>state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setError(''))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n            <Snackbar open={!!error} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert\r\n                    onClose={handleClose}\r\n                    severity=\"error\"\r\n                    sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\nimport './App.module.css';\nimport s from './App.module.css'\nimport {AppBar, Box, Button,LinearProgress, Toolbar, Typography} from \"@mui/material\";\nimport {Routes, Route, Link} from \"react-router-dom\";\nimport {ExchangeCard} from \"./ui/ExchangeCard\";\nimport {LatestRates} from \"./ui/LatestRates\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./bll/store\";\nimport {ErrorSnackBar} from \"./ui/ErrorSnackBar\";\n\n\nexport function App() {\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading)\n    return <div className={s.appWrapper}>\n        <AppBar position={'static'}>\n            <Toolbar style={{justifyContent: 'space-evenly', alignItems: 'center'}}>\n                <Typography variant={'h6'}>\n                    Simple currency exchange\n                </Typography>\n                <Link to={'/'}>\n                    <Button\n                        variant={\"text\"} color={'inherit'}>Currency\n                        exchange</Button>\n                </Link>\n                <Link to={'/rates'}>\n                    <Button\n                        variant={\"text\"} color={'inherit'}>Latest\n                        Rates</Button>\n                </Link>\n            </Toolbar>\n        </AppBar>\n        {isLoading && <Box sx={{width: '100%'}}>\n            <LinearProgress/>\n        </Box>}\n        <Routes>\n            <Route path={'/'} element={<ExchangeCard/>}/>\n            <Route path={'/rates'} element={<LatestRates/>}/>\n        </Routes>\n        <ErrorSnackBar/>\n    </div>\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {conversionReducer} from \"./conversion-reducer\";\r\nimport {ratesReducer} from \"./rates-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    conversion: conversionReducer,\r\n    rates:ratesReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename={'/currency-app/'}>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currCard\":\"ExchangeCard_currCard__1LmxV\",\"resultContainer\":\"ExchangeCard_resultContainer__2_hCS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3N15s\",\"currWrapper\":\"App_currWrapper__ZkNxZ\"};"],"sourceRoot":""}